## OWASP Top 10 - 2021 Overview (Common Web Application Security Risks)

The OWASP Top 10 is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to web applications.

### A01:2021 - Broken Access Control
**Description:** Failures to properly implement restrictions on authenticated users. Attackers can exploit these flaws to gain unauthorized access to functionality or data, such as accessing other users' accounts, viewing sensitive files, or modifying data.
**Recommendations:**
- Implement robust access control mechanisms based on the principle of least privilege.
- Deny by default; only grant access to specific roles or functions.
- Centralize access control management.
- Test for access control flaws using both automated and manual techniques.

### A02:2021 - Cryptographic Failures
**Description:** Previously "Sensitive Data Exposure," this category focuses on flaws related to cryptographic protections. This includes failure to encrypt sensitive data, using weak encryption algorithms, or improper key management, leading to exposure of sensitive information like PII, financial data, or credentials.
**Recommendations:**
- Encrypt all sensitive data at rest and in transit using strong, industry-standard algorithms (e.g., AES-256 for data at rest, TLS 1.2+ for data in transit).
- Implement robust key management practices.
- Do not store sensitive data unnecessarily.
- Hash and salt passwords properly (e.g., using Argon2, bcrypt, or scrypt).

### A03:2021 - Injection
**Description:** Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attackerâ€™s malicious data can trick the interpreter into executing unintended commands or accessing unauthorized data.
**Recommendations:**
- Use parameterized queries (prepared statements) for database interactions.
- Employ safe APIs that avoid the use of the interpreter entirely.
- Perform strict input validation (whitelist validation) on all user-supplied data.
- Escape special characters in inputs.

### A04:2021 - Insecure Design
**Description:** A new category focusing on missing or ineffective control design. This risk highlights vulnerabilities that arise from fundamental design flaws in the application, rather than just implementation bugs. It emphasizes proactive security thinking.
**Recommendations:**
- Adopt a "security by design" approach throughout the software development lifecycle (SDLC).
- Perform threat modeling during the design phase.
- Establish and use secure design patterns and libraries.
- Document and implement clear security requirements.

### A05:2021 - Security Misconfiguration
**Description:** Commonly found vulnerabilities due to insecure default configurations, incomplete or unpatched systems, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information.
**Recommendations:**
- Implement a repeatable hardening process for all environments.
- Remove or disable unused features and services.
- Automate security configuration management.
- Regularly patch and update all software, frameworks, and libraries.
- Disable verbose error messages in production environments.

### A06:2021 - Vulnerable and Outdated Components
**Description:** Using components (libraries, frameworks, and other software modules) with known vulnerabilities. This is a very common risk as many applications rely heavily on third-party components.
**Recommendations:**
- Regularly audit and inventory all components and their versions.
- Use software composition analysis (SCA) tools to identify vulnerable components.
- Subscribe to security advisories and promptly update vulnerable components.
- Remove unused dependencies.

### A07:2021 - Identification and Authentication Failures
**Description:** Previously "Broken Authentication," this category now emphasizes issues related to correctly identifying and authenticating users. This includes weak password requirements, exposed session IDs, brute-force attacks, and insecure credential recovery mechanisms.
**Recommendations:**
- Implement strong password policies (length, complexity, uniqueness).
- Use multi-factor authentication (MFA).
- Implement secure session management (e.g., rotating session IDs).
- Enforce rate limiting on login attempts.
- Use secure credential recovery processes.

### A08:2021 - Software and Data Integrity Failures
**Description:** A new category focusing on integrity violations, especially related to critical data and updates without proper integrity checks. This includes insecure deserialization, auto-updates without verification, or CI/CD pipelines that do not enforce integrity.
**Recommendations:**
- Ensure all software updates, critical data, and CI/CD pipelines have integrity checks (e.g., digital signatures, checksums).
- Implement secure deserialization practices, avoiding untrusted data.
- Validate data integrity at critical points.

### A09:2021 - Security Logging and Monitoring Failures
**Description:** Insufficient logging and monitoring, or ineffective incident response, can allow attackers to persist, pivot to other systems, and tamper with or extract data without detection.
**Recommendations:**
- Implement comprehensive logging for all security-relevant events.
- Centralize log management for easier analysis.
- Implement real-time monitoring and alerting for suspicious activities.
- Establish an effective incident response plan.

### A10:2021 - Server-Side Request Forgery (SSRF)
**Description:** SSRF flaws occur when a web application fetches a remote resource without validating the user-supplied URL. This allows an attacker to coerce the application to send a crafted request to an unintended destination, even behind firewalls.
**Recommendations:**
- Validate all user-supplied URLs.
- Implement positive allow list (whitelist) for allowed domains and schemes.
- Disallow redirects.
- Isolate the functionality that fetches URLs to its own network segment.
